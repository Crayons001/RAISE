pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        def propertiesFile = new File(settingsDir.parentFile, 'local.properties')
        if (propertiesFile.exists()) {
            propertiesFile.withReader('UTF-8') { reader -> properties.load(reader) }
        }
        def flutterSdk = properties.getProperty('flutter.sdk')
        assert flutterSdk != null, "flutter.sdk not set in local.properties"
        return flutterSdk
    }()

    includeBuild("${flutterSdkPath}/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    plugins {
        id 'com.android.application' version '7.3.1'
        id 'com.android.library' version '7.3.1'
        id 'org.jetbrains.kotlin.android' version '1.8.10'
        id 'dev.flutter.flutter-plugin-loader' version '1.0.0'
    }
}

plugins {
    id 'com.android.application' apply false
    id 'com.android.library' apply false
    id 'org.jetbrains.kotlin.android' apply false
    id 'dev.flutter.flutter-plugin-loader' version '1.0.0'
}

include ':app'

// Remove the old imperative plugin application
// def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
// def properties = new Properties()
// assert localPropertiesFile.exists()
// localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
// def flutterSdkPath = properties.getProperty("flutter.sdk")
// assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
// apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle" 